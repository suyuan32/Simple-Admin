// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-core/pkg/ent/predicate"
	"github.com/suyuan32/simple-admin-core/pkg/ent/tenant"
	"github.com/suyuan32/simple-admin-core/pkg/ent/user"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks    []Hook
	mutation *TenantMutation
}

// Where appends a list predicates to the TenantUpdate builder.
func (tu *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TenantUpdate) SetUpdatedAt(t time.Time) *TenantUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TenantUpdate) SetStatus(u uint8) *TenantUpdate {
	tu.mutation.ResetStatus()
	tu.mutation.SetStatus(u)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableStatus(u *uint8) *TenantUpdate {
	if u != nil {
		tu.SetStatus(*u)
	}
	return tu
}

// AddStatus adds u to the "status" field.
func (tu *TenantUpdate) AddStatus(u int8) *TenantUpdate {
	tu.mutation.AddStatus(u)
	return tu
}

// ClearStatus clears the value of the "status" field.
func (tu *TenantUpdate) ClearStatus() *TenantUpdate {
	tu.mutation.ClearStatus()
	return tu
}

// SetUUID sets the "uuid" field.
func (tu *TenantUpdate) SetUUID(s string) *TenantUpdate {
	tu.mutation.SetUUID(s)
	return tu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableUUID(s *string) *TenantUpdate {
	if s != nil {
		tu.SetUUID(*s)
	}
	return tu
}

// SetPid sets the "pid" field.
func (tu *TenantUpdate) SetPid(u uint64) *TenantUpdate {
	tu.mutation.SetPid(u)
	return tu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (tu *TenantUpdate) SetNillablePid(u *uint64) *TenantUpdate {
	if u != nil {
		tu.SetPid(*u)
	}
	return tu
}

// ClearPid clears the value of the "pid" field.
func (tu *TenantUpdate) ClearPid() *TenantUpdate {
	tu.mutation.ClearPid()
	return tu
}

// SetLevel sets the "level" field.
func (tu *TenantUpdate) SetLevel(u uint32) *TenantUpdate {
	tu.mutation.ResetLevel()
	tu.mutation.SetLevel(u)
	return tu
}

// AddLevel adds u to the "level" field.
func (tu *TenantUpdate) AddLevel(u int32) *TenantUpdate {
	tu.mutation.AddLevel(u)
	return tu
}

// SetName sets the "name" field.
func (tu *TenantUpdate) SetName(s string) *TenantUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetAccount sets the "account" field.
func (tu *TenantUpdate) SetAccount(s string) *TenantUpdate {
	tu.mutation.SetAccount(s)
	return tu
}

// SetStartTime sets the "start_time" field.
func (tu *TenantUpdate) SetStartTime(t time.Time) *TenantUpdate {
	tu.mutation.SetStartTime(t)
	return tu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableStartTime(t *time.Time) *TenantUpdate {
	if t != nil {
		tu.SetStartTime(*t)
	}
	return tu
}

// SetEndTime sets the "end_time" field.
func (tu *TenantUpdate) SetEndTime(t time.Time) *TenantUpdate {
	tu.mutation.SetEndTime(t)
	return tu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableEndTime(t *time.Time) *TenantUpdate {
	if t != nil {
		tu.SetEndTime(*t)
	}
	return tu
}

// ClearEndTime clears the value of the "end_time" field.
func (tu *TenantUpdate) ClearEndTime() *TenantUpdate {
	tu.mutation.ClearEndTime()
	return tu
}

// SetContact sets the "contact" field.
func (tu *TenantUpdate) SetContact(s string) *TenantUpdate {
	tu.mutation.SetContact(s)
	return tu
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableContact(s *string) *TenantUpdate {
	if s != nil {
		tu.SetContact(*s)
	}
	return tu
}

// ClearContact clears the value of the "contact" field.
func (tu *TenantUpdate) ClearContact() *TenantUpdate {
	tu.mutation.ClearContact()
	return tu
}

// SetMobile sets the "mobile" field.
func (tu *TenantUpdate) SetMobile(s string) *TenantUpdate {
	tu.mutation.SetMobile(s)
	return tu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableMobile(s *string) *TenantUpdate {
	if s != nil {
		tu.SetMobile(*s)
	}
	return tu
}

// ClearMobile clears the value of the "mobile" field.
func (tu *TenantUpdate) ClearMobile() *TenantUpdate {
	tu.mutation.ClearMobile()
	return tu
}

// SetSortNo sets the "sort_no" field.
func (tu *TenantUpdate) SetSortNo(u uint32) *TenantUpdate {
	tu.mutation.ResetSortNo()
	tu.mutation.SetSortNo(u)
	return tu
}

// SetNillableSortNo sets the "sort_no" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableSortNo(u *uint32) *TenantUpdate {
	if u != nil {
		tu.SetSortNo(*u)
	}
	return tu
}

// AddSortNo adds u to the "sort_no" field.
func (tu *TenantUpdate) AddSortNo(u int32) *TenantUpdate {
	tu.mutation.AddSortNo(u)
	return tu
}

// ClearSortNo clears the value of the "sort_no" field.
func (tu *TenantUpdate) ClearSortNo() *TenantUpdate {
	tu.mutation.ClearSortNo()
	return tu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tu *TenantUpdate) AddUserIDs(ids ...uint64) *TenantUpdate {
	tu.mutation.AddUserIDs(ids...)
	return tu
}

// AddUsers adds the "users" edges to the User entity.
func (tu *TenantUpdate) AddUsers(u ...*User) *TenantUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddUserIDs(ids...)
}

// SetParentID sets the "parent" edge to the Tenant entity by ID.
func (tu *TenantUpdate) SetParentID(id uint64) *TenantUpdate {
	tu.mutation.SetParentID(id)
	return tu
}

// SetNillableParentID sets the "parent" edge to the Tenant entity by ID if the given value is not nil.
func (tu *TenantUpdate) SetNillableParentID(id *uint64) *TenantUpdate {
	if id != nil {
		tu = tu.SetParentID(*id)
	}
	return tu
}

// SetParent sets the "parent" edge to the Tenant entity.
func (tu *TenantUpdate) SetParent(t *Tenant) *TenantUpdate {
	return tu.SetParentID(t.ID)
}

// AddChildIDs adds the "children" edge to the Tenant entity by IDs.
func (tu *TenantUpdate) AddChildIDs(ids ...uint64) *TenantUpdate {
	tu.mutation.AddChildIDs(ids...)
	return tu
}

// AddChildren adds the "children" edges to the Tenant entity.
func (tu *TenantUpdate) AddChildren(t ...*Tenant) *TenantUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddChildIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tu *TenantUpdate) Mutation() *TenantMutation {
	return tu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (tu *TenantUpdate) ClearUsers() *TenantUpdate {
	tu.mutation.ClearUsers()
	return tu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (tu *TenantUpdate) RemoveUserIDs(ids ...uint64) *TenantUpdate {
	tu.mutation.RemoveUserIDs(ids...)
	return tu
}

// RemoveUsers removes "users" edges to User entities.
func (tu *TenantUpdate) RemoveUsers(u ...*User) *TenantUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveUserIDs(ids...)
}

// ClearParent clears the "parent" edge to the Tenant entity.
func (tu *TenantUpdate) ClearParent() *TenantUpdate {
	tu.mutation.ClearParent()
	return tu
}

// ClearChildren clears all "children" edges to the Tenant entity.
func (tu *TenantUpdate) ClearChildren() *TenantUpdate {
	tu.mutation.ClearChildren()
	return tu
}

// RemoveChildIDs removes the "children" edge to Tenant entities by IDs.
func (tu *TenantUpdate) RemoveChildIDs(ids ...uint64) *TenantUpdate {
	tu.mutation.RemoveChildIDs(ids...)
	return tu
}

// RemoveChildren removes "children" edges to Tenant entities.
func (tu *TenantUpdate) RemoveChildren(t ...*Tenant) *TenantUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TenantUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := tenant.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

func (tu *TenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: tenant.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(tenant.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := tu.mutation.AddedStatus(); ok {
		_spec.AddField(tenant.FieldStatus, field.TypeUint8, value)
	}
	if tu.mutation.StatusCleared() {
		_spec.ClearField(tenant.FieldStatus, field.TypeUint8)
	}
	if value, ok := tu.mutation.UUID(); ok {
		_spec.SetField(tenant.FieldUUID, field.TypeString, value)
	}
	if value, ok := tu.mutation.Level(); ok {
		_spec.SetField(tenant.FieldLevel, field.TypeUint32, value)
	}
	if value, ok := tu.mutation.AddedLevel(); ok {
		_spec.AddField(tenant.FieldLevel, field.TypeUint32, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Account(); ok {
		_spec.SetField(tenant.FieldAccount, field.TypeString, value)
	}
	if value, ok := tu.mutation.StartTime(); ok {
		_spec.SetField(tenant.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.EndTime(); ok {
		_spec.SetField(tenant.FieldEndTime, field.TypeTime, value)
	}
	if tu.mutation.EndTimeCleared() {
		_spec.ClearField(tenant.FieldEndTime, field.TypeTime)
	}
	if value, ok := tu.mutation.Contact(); ok {
		_spec.SetField(tenant.FieldContact, field.TypeString, value)
	}
	if tu.mutation.ContactCleared() {
		_spec.ClearField(tenant.FieldContact, field.TypeString)
	}
	if value, ok := tu.mutation.Mobile(); ok {
		_spec.SetField(tenant.FieldMobile, field.TypeString, value)
	}
	if tu.mutation.MobileCleared() {
		_spec.ClearField(tenant.FieldMobile, field.TypeString)
	}
	if value, ok := tu.mutation.SortNo(); ok {
		_spec.SetField(tenant.FieldSortNo, field.TypeUint32, value)
	}
	if value, ok := tu.mutation.AddedSortNo(); ok {
		_spec.AddField(tenant.FieldSortNo, field.TypeUint32, value)
	}
	if tu.mutation.SortNoCleared() {
		_spec.ClearField(tenant.FieldSortNo, field.TypeUint32)
	}
	if tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.UsersTable,
			Columns: tenant.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.UsersTable,
			Columns: tenant.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.UsersTable,
			Columns: tenant.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenant.ParentTable,
			Columns: []string{tenant.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenant.ParentTable,
			Columns: []string{tenant.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ChildrenTable,
			Columns: []string{tenant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !tu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ChildrenTable,
			Columns: []string{tenant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ChildrenTable,
			Columns: []string{tenant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TenantUpdateOne) SetUpdatedAt(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TenantUpdateOne) SetStatus(u uint8) *TenantUpdateOne {
	tuo.mutation.ResetStatus()
	tuo.mutation.SetStatus(u)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableStatus(u *uint8) *TenantUpdateOne {
	if u != nil {
		tuo.SetStatus(*u)
	}
	return tuo
}

// AddStatus adds u to the "status" field.
func (tuo *TenantUpdateOne) AddStatus(u int8) *TenantUpdateOne {
	tuo.mutation.AddStatus(u)
	return tuo
}

// ClearStatus clears the value of the "status" field.
func (tuo *TenantUpdateOne) ClearStatus() *TenantUpdateOne {
	tuo.mutation.ClearStatus()
	return tuo
}

// SetUUID sets the "uuid" field.
func (tuo *TenantUpdateOne) SetUUID(s string) *TenantUpdateOne {
	tuo.mutation.SetUUID(s)
	return tuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableUUID(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetUUID(*s)
	}
	return tuo
}

// SetPid sets the "pid" field.
func (tuo *TenantUpdateOne) SetPid(u uint64) *TenantUpdateOne {
	tuo.mutation.SetPid(u)
	return tuo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillablePid(u *uint64) *TenantUpdateOne {
	if u != nil {
		tuo.SetPid(*u)
	}
	return tuo
}

// ClearPid clears the value of the "pid" field.
func (tuo *TenantUpdateOne) ClearPid() *TenantUpdateOne {
	tuo.mutation.ClearPid()
	return tuo
}

// SetLevel sets the "level" field.
func (tuo *TenantUpdateOne) SetLevel(u uint32) *TenantUpdateOne {
	tuo.mutation.ResetLevel()
	tuo.mutation.SetLevel(u)
	return tuo
}

// AddLevel adds u to the "level" field.
func (tuo *TenantUpdateOne) AddLevel(u int32) *TenantUpdateOne {
	tuo.mutation.AddLevel(u)
	return tuo
}

// SetName sets the "name" field.
func (tuo *TenantUpdateOne) SetName(s string) *TenantUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetAccount sets the "account" field.
func (tuo *TenantUpdateOne) SetAccount(s string) *TenantUpdateOne {
	tuo.mutation.SetAccount(s)
	return tuo
}

// SetStartTime sets the "start_time" field.
func (tuo *TenantUpdateOne) SetStartTime(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetStartTime(t)
	return tuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableStartTime(t *time.Time) *TenantUpdateOne {
	if t != nil {
		tuo.SetStartTime(*t)
	}
	return tuo
}

// SetEndTime sets the "end_time" field.
func (tuo *TenantUpdateOne) SetEndTime(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetEndTime(t)
	return tuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableEndTime(t *time.Time) *TenantUpdateOne {
	if t != nil {
		tuo.SetEndTime(*t)
	}
	return tuo
}

// ClearEndTime clears the value of the "end_time" field.
func (tuo *TenantUpdateOne) ClearEndTime() *TenantUpdateOne {
	tuo.mutation.ClearEndTime()
	return tuo
}

// SetContact sets the "contact" field.
func (tuo *TenantUpdateOne) SetContact(s string) *TenantUpdateOne {
	tuo.mutation.SetContact(s)
	return tuo
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableContact(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetContact(*s)
	}
	return tuo
}

// ClearContact clears the value of the "contact" field.
func (tuo *TenantUpdateOne) ClearContact() *TenantUpdateOne {
	tuo.mutation.ClearContact()
	return tuo
}

// SetMobile sets the "mobile" field.
func (tuo *TenantUpdateOne) SetMobile(s string) *TenantUpdateOne {
	tuo.mutation.SetMobile(s)
	return tuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableMobile(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetMobile(*s)
	}
	return tuo
}

// ClearMobile clears the value of the "mobile" field.
func (tuo *TenantUpdateOne) ClearMobile() *TenantUpdateOne {
	tuo.mutation.ClearMobile()
	return tuo
}

// SetSortNo sets the "sort_no" field.
func (tuo *TenantUpdateOne) SetSortNo(u uint32) *TenantUpdateOne {
	tuo.mutation.ResetSortNo()
	tuo.mutation.SetSortNo(u)
	return tuo
}

// SetNillableSortNo sets the "sort_no" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableSortNo(u *uint32) *TenantUpdateOne {
	if u != nil {
		tuo.SetSortNo(*u)
	}
	return tuo
}

// AddSortNo adds u to the "sort_no" field.
func (tuo *TenantUpdateOne) AddSortNo(u int32) *TenantUpdateOne {
	tuo.mutation.AddSortNo(u)
	return tuo
}

// ClearSortNo clears the value of the "sort_no" field.
func (tuo *TenantUpdateOne) ClearSortNo() *TenantUpdateOne {
	tuo.mutation.ClearSortNo()
	return tuo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tuo *TenantUpdateOne) AddUserIDs(ids ...uint64) *TenantUpdateOne {
	tuo.mutation.AddUserIDs(ids...)
	return tuo
}

// AddUsers adds the "users" edges to the User entity.
func (tuo *TenantUpdateOne) AddUsers(u ...*User) *TenantUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddUserIDs(ids...)
}

// SetParentID sets the "parent" edge to the Tenant entity by ID.
func (tuo *TenantUpdateOne) SetParentID(id uint64) *TenantUpdateOne {
	tuo.mutation.SetParentID(id)
	return tuo
}

// SetNillableParentID sets the "parent" edge to the Tenant entity by ID if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableParentID(id *uint64) *TenantUpdateOne {
	if id != nil {
		tuo = tuo.SetParentID(*id)
	}
	return tuo
}

// SetParent sets the "parent" edge to the Tenant entity.
func (tuo *TenantUpdateOne) SetParent(t *Tenant) *TenantUpdateOne {
	return tuo.SetParentID(t.ID)
}

// AddChildIDs adds the "children" edge to the Tenant entity by IDs.
func (tuo *TenantUpdateOne) AddChildIDs(ids ...uint64) *TenantUpdateOne {
	tuo.mutation.AddChildIDs(ids...)
	return tuo
}

// AddChildren adds the "children" edges to the Tenant entity.
func (tuo *TenantUpdateOne) AddChildren(t ...*Tenant) *TenantUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddChildIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tuo *TenantUpdateOne) Mutation() *TenantMutation {
	return tuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (tuo *TenantUpdateOne) ClearUsers() *TenantUpdateOne {
	tuo.mutation.ClearUsers()
	return tuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (tuo *TenantUpdateOne) RemoveUserIDs(ids ...uint64) *TenantUpdateOne {
	tuo.mutation.RemoveUserIDs(ids...)
	return tuo
}

// RemoveUsers removes "users" edges to User entities.
func (tuo *TenantUpdateOne) RemoveUsers(u ...*User) *TenantUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveUserIDs(ids...)
}

// ClearParent clears the "parent" edge to the Tenant entity.
func (tuo *TenantUpdateOne) ClearParent() *TenantUpdateOne {
	tuo.mutation.ClearParent()
	return tuo
}

// ClearChildren clears all "children" edges to the Tenant entity.
func (tuo *TenantUpdateOne) ClearChildren() *TenantUpdateOne {
	tuo.mutation.ClearChildren()
	return tuo
}

// RemoveChildIDs removes the "children" edge to Tenant entities by IDs.
func (tuo *TenantUpdateOne) RemoveChildIDs(ids ...uint64) *TenantUpdateOne {
	tuo.mutation.RemoveChildIDs(ids...)
	return tuo
}

// RemoveChildren removes "children" edges to Tenant entities.
func (tuo *TenantUpdateOne) RemoveChildren(t ...*Tenant) *TenantUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveChildIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tenant entity.
func (tuo *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	var (
		err  error
		node *Tenant
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Tenant)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TenantMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TenantUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := tenant.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

func (tuo *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: tenant.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(tenant.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := tuo.mutation.AddedStatus(); ok {
		_spec.AddField(tenant.FieldStatus, field.TypeUint8, value)
	}
	if tuo.mutation.StatusCleared() {
		_spec.ClearField(tenant.FieldStatus, field.TypeUint8)
	}
	if value, ok := tuo.mutation.UUID(); ok {
		_spec.SetField(tenant.FieldUUID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Level(); ok {
		_spec.SetField(tenant.FieldLevel, field.TypeUint32, value)
	}
	if value, ok := tuo.mutation.AddedLevel(); ok {
		_spec.AddField(tenant.FieldLevel, field.TypeUint32, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Account(); ok {
		_spec.SetField(tenant.FieldAccount, field.TypeString, value)
	}
	if value, ok := tuo.mutation.StartTime(); ok {
		_spec.SetField(tenant.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.EndTime(); ok {
		_spec.SetField(tenant.FieldEndTime, field.TypeTime, value)
	}
	if tuo.mutation.EndTimeCleared() {
		_spec.ClearField(tenant.FieldEndTime, field.TypeTime)
	}
	if value, ok := tuo.mutation.Contact(); ok {
		_spec.SetField(tenant.FieldContact, field.TypeString, value)
	}
	if tuo.mutation.ContactCleared() {
		_spec.ClearField(tenant.FieldContact, field.TypeString)
	}
	if value, ok := tuo.mutation.Mobile(); ok {
		_spec.SetField(tenant.FieldMobile, field.TypeString, value)
	}
	if tuo.mutation.MobileCleared() {
		_spec.ClearField(tenant.FieldMobile, field.TypeString)
	}
	if value, ok := tuo.mutation.SortNo(); ok {
		_spec.SetField(tenant.FieldSortNo, field.TypeUint32, value)
	}
	if value, ok := tuo.mutation.AddedSortNo(); ok {
		_spec.AddField(tenant.FieldSortNo, field.TypeUint32, value)
	}
	if tuo.mutation.SortNoCleared() {
		_spec.ClearField(tenant.FieldSortNo, field.TypeUint32)
	}
	if tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.UsersTable,
			Columns: tenant.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.UsersTable,
			Columns: tenant.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.UsersTable,
			Columns: tenant.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenant.ParentTable,
			Columns: []string{tenant.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenant.ParentTable,
			Columns: []string{tenant.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ChildrenTable,
			Columns: []string{tenant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !tuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ChildrenTable,
			Columns: []string{tenant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ChildrenTable,
			Columns: []string{tenant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tenant{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
